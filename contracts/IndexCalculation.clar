(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-SCORE u101)
(define-constant ERR-INVALID-COUNTRY u102)
(define-constant ERR-INVALID-WEIGHT u103)
(define-constant ERR-DATA-NOT-FOUND u104)
(define-constant ERR-INVALID-TIMESTAMP u105)
(define-constant ERR-INVALID-VERIFIER u106)
(define-constant ERR-WEIGHT-SUM-INVALID u107)
(define-constant ERR-INVALID-CATEGORY u108)
(define-constant ERR-INVALID-VERSION u109)
(define-constant ERR-INVALID-CALC-METHOD u110)
(define-constant MAX-SCORE u10000)
(define-constant WEIGHT-SUM u100)
(define-data-var index-version uint u1)
(define-data-var authority-contract (optional principal) none)
(define-data-var calc-method (string-ascii 20) "weighted-average")
(define-map country-indices
  { country: (string-ascii 3) }
  { score: uint, last-updated: uint, submission-count: uint, bribery-weight: uint, transparency-weight: uint, audit-weight: uint })
(define-map data-submissions
  { submission-id: uint }
  { country: (string-ascii 3), bribery-score: uint, transparency-score: uint, audit-score: uint, timestamp: uint, submitter: principal })
(define-map submission-verifications
  { submission-id: uint }
  { verifier-count: uint, approved: bool, timestamp: uint })
(define-data-var next-submission-id uint u0)
(define-data-var bribery-weight uint u40)
(define-data-var transparency-weight uint u30)
(define-data-var audit-weight uint u30)
(define-private (validate-country (country (string-ascii 3)))
  (if (and (> (len country) u0) (<= (len country) u3))
      (ok true)
      (err ERR-INVALID-COUNTRY)))
(define-private (validate-score (score uint))
  (if (<= score u100)
      (ok true)
      (err ERR-INVALID-SCORE)))
(define-private (validate-weights (bribery uint) (transparency uint) (audit uint))
  (if (is-eq (+ bribery transparency audit) WEIGHT-SUM)
      (ok true)
      (err ERR-WEIGHT-SUM-INVALID)))
(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
      (ok true)
      (err ERR-INVALID-TIMESTAMP)))
(define-private (validate-calc-method (method (string-ascii 20)))
  (if (or (is-eq method "weighted-average") (is-eq method "simple-average"))
      (ok true)
      (err ERR-INVALID-CALC-METHOD)))
(define-private (validate-verifier (verifier principal))
  (if (not (is-eq verifier 'SP000000000000000000002Q6VF78))
      (ok true)
      (err ERR-INVALID-VERIFIER)))
(define-read-only (get-index (country (string-ascii 3)))
  (map-get? country-indices { country: country }))
(define-read-only (get-submission (submission-id uint))
  (map-get? data-submissions { submission-id: submission-id }))
(define-read-only (get-verification (submission-id uint))
  (map-get? submission-verifications { submission-id: submission-id }))
(define-read-only (get-current-weights)
  { bribery: (var-get bribery-weight), transparency: (var-get transparency-weight), audit: (var-get audit-weight) })
(define-read-only (get-calc-method)
  (var-get calc-method))
(define-public (set-authority-contract (contract-principal principal))
  (begin
    (try! (validate-verifier contract-principal))
    (asserts! (is-none (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (var-set authority-contract (some contract-principal))
    (ok true)))
(define-public (set-weights (new-bribery uint) (new-transparency uint) (new-audit uint))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-weights new-bribery new-transparency new-audit))
    (var-set bribery-weight new-bribery)
    (var-set transparency-weight new-transparency)
    (var-set audit-weight new-audit)
    (ok true)))
(define-public (set-calc-method (new-method (string-ascii 20)))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-calc-method new-method))
    (var-set calc-method new-method)
    (ok true)))
(define-public (submit-data
  (country (string-ascii 3))
  (bribery-score uint)
  (transparency-score uint)
  (audit-score uint))
  (let
    (
      (submission-id (var-get next-submission-id))
    )
    (try! (validate-country country))
    (try! (validate-score bribery-score))
    (try! (validate-score transparency-score))
    (try! (validate-score audit-score))
    (try! (validate-timestamp block-height))
    (map-set data-submissions
      { submission-id: submission-id }
      { country: country, bribery-score: bribery-score, transparency-score: transparency-score, audit-score: audit-score, timestamp: block-height, submitter: tx-sender })
    (map-set submission-verifications
      { submission-id: submission-id }
      { verifier-count: u0, approved: false, timestamp: block-height })
    (var-set next-submission-id (+ submission-id u1))
    (ok submission-id)))
(define-public (verify-submission (submission-id uint))
  (let
    (
      (submission (unwrap! (map-get? data-submissions { submission-id: submission-id }) (err ERR-DATA-NOT-FOUND)))
      (verification (unwrap! (map-get? submission-verifications { submission-id: submission-id }) (err ERR-DATA-NOT-FOUND)))
    )
    (try! (validate-verifier tx-sender))
    (map-set submission-verifications
      { submission-id: submission-id }
      { verifier-count: (+ (get verifier-count verification) u1), approved: (>= (+ (get verifier-count verification) u1) u3), timestamp: block-height })
    (if (>= (+ (get verifier-count verification) u1) u3)
        (try! (update-index
                (get country submission)
                (get bribery-score submission)
                (get transparency-score submission)
                (get audit-score submission)))
        (ok true))
    (ok true)))
(define-public (update-index
  (country (string-ascii 3))
  (bribery-score uint)
  (transparency-score uint)
  (audit-score uint))
  (let
    (
      (current-index (default-to { score: u0, last-updated: u0, submission-count: u0, bribery-weight: (var-get bribery-weight), transparency-weight: (var-get transparency-weight), audit-weight: (var-get audit-weight) }
                      (map-get? country-indices { country: country })))
      (method (var-get calc-method))
      (new-score (if (is-eq method "weighted-average")
                     (/ (+ (* bribery-score (var-get bribery-weight))
                           (* transparency-score (var-get transparency-weight))
                           (* audit-score (var-get audit-weight))) u100)
                     (/ (+ bribery-score transparency-score audit-score) u3)))
      (normalized-score (min new-score MAX-SCORE))
      (new-count (+ (get submission-count current-index) u1))
    )
    (asserts! (is-some (var-get authority-contract)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-country country))
    (try! (validate-score bribery-score))
    (try! (validate-score transparency-score))
    (try! (validate-score audit-score))
    (map-set country-indices
      { country: country }
      { score: normalized-score, last-updated: block-height, submission-count: new-count, bribery-weight: (var-get bribery-weight), transparency-weight: (var-get transparency-weight), audit-weight: (var-get audit-weight) })
    (ok normalized-score)))